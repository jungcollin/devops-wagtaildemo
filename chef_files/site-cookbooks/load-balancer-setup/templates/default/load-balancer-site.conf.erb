# ref: https://github.com/torchbox/wagtail/blob/master/etc/nginx.conf.sample

# the upstream component nginx needs to connect to
upstream uwsgiclusters {
<% if node["load-balancer-setup"]["app_servers"] %>
    <% node["load-balancer-setup"]["app_servers"].each do |server| %>
    server <%= server %>;
    <% end %>
<% end %>
}

server {
    # We don't set 'root' here, because we send location / to uWSGI, so
    # nothing ends up at nginx's default handler.

    listen <%= node["load-balancer-setup"]["port"] %>;
    server_name <%= node["load-balancer-setup"]["site_domain"] %>;

    error_log /var/log/nginx/<%= node["load-balancer-setup"]["site_domain"] %>_error.log;
    access_log /var/log/nginx/<%= node["load-balancer-setup"]["site_domain"] %>_access.log;

    # Maximum file upload size.
    client_max_body_size 64M;

    # Enable content compression for text types.
    gzip on;
    gzip_types text/plain text/css application/x-javascript image/svg+xml;
    gzip_comp_level 1;
    gzip_disable msie6;
    gzip_http_version 1.0;
    gzip_proxied any;
    gzip_vary on;

    location /static/ {
        access_log off;
        expires 3600;
        alias <%= node["deploy-setup"]["app_path"] %>/static/;
    }

    # Set a longer expiry for CACHE/, because the filenames are unique.
    location /static/CACHE/ {
        access_log off;
        expires 864000;
        alias <%= node["deploy-setup"]["app_path"] %>/static/CACHE/;
    }

    # Only server /media/images by default, not e.g. original_images/.
    location /media/images {
        expires 864000;
        alias <%= node["deploy-setup"]["app_path"] %>/media/images;
    }

    # Finally, send all non-media requests to the Django server.
    location / {
        uwsgi_pass  uwsgiclusters;
        uwsgi_read_timeout 1800;

        include     /etc/nginx/uwsgi_params;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Queue-Start "t=${msec}000";
        proxy_redirect off;
        # proxy_pass http://backend;
    }
}
